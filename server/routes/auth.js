import express from "express";
import jwt from "jsonwebtoken";
import User from "../models/User.js";
import Session from "../models/Session.js";
import { authenticate, registerLimiter } from "../middleware/auth.js";
import validator from "validator";
const router = express.Router();
import ErrorLog from "../models/ErrorLog.js";
import AuditLog from "../models/AuditLog.js";
import crypto from "crypto"
// Register
router.post("/register", registerLimiter, authenticate, async (req, res) => {
  try {
    const { username, email, password, role } = req.body;
    if (!username || !email || !password) {
      return res.status(400).json({
        message: "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫ï‡∫µ‡∫°‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫ª‡∫ö‡∫ñ‡ªâ‡∫ß‡∫ô",
      });
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢)
    if (!/^[a-zA-Z0-9_]{3,30}$/.test(username)) {
      return res.status(400).json({
        message:
          "‡∫ä‡∫∑‡ªà‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ 3-30 ‡∫ï‡∫ª‡∫ß‡∫≠‡∫±‡∫Å‡∫™‡∫≠‡∫ô ‡ªÅ‡∫•‡∫∞‡∫õ‡∫∞‡∫Å‡∫≠‡∫ö‡∫î‡ªâ‡∫ß‡∫ç a-z, 0-9, _ ‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô",
      });
    }
    if (!validator.isEmail(email)) {
      return res.status(400).json({
        message: "‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫≠‡∫¥‡ªÄ‡∫°‡∫ß‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
      });
    }
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    if (!passwordRegex.test(password)) {
      return res.status(400).json({
        message:
          "‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô‡∫¢‡ªà‡∫≤‡∫á‡ªú‡ªâ‡∫≠‡∫ç 8 ‡∫ï‡∫ª‡∫ß‡∫≠‡∫±‡∫Å‡∫™‡∫≠‡∫ô ‡∫õ‡∫∞‡∫Å‡∫≠‡∫ö‡∫î‡ªâ‡∫ß‡∫ç‡∫ï‡∫ª‡∫ß‡∫û‡∫¥‡∫°‡ªÉ‡∫´‡ªà‡∫ç ‡∫û‡∫¥‡∫°‡∫ô‡ªâ‡∫≠‡∫ç ‡∫ï‡∫ª‡∫ß‡∫≠‡∫±‡∫Å‡∫™‡∫≠‡∫ô ‡ªÅ‡∫•‡∫∞ ‡∫≠‡∫±‡∫Å‡∫Ç‡∫∞‡∫•‡∫∞‡∫û‡∫¥‡ªÄ‡∫™‡∫î",
      });
    }
    const allowedRoles = ["user", "admin", "staff"];
    const userRole = role || "user";
    if (!allowedRoles.includes(userRole)) {
      return res.status(400).json({
        message: "‡∫ö‡∫ª‡∫î‡∫ö‡∫≤‡∫î‡∫ó‡∫µ‡ªà‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
      });
    }
    // Check if user exists
    const existingUser = await User.findOne({ $or: [{ email }, { username }] });
    if (existingUser) {
      return res.status(400).json({
        message: "‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô‡∫ô‡∫µ‡ªâ‡∫°‡∫µ‡∫¢‡∫π‡ªà‡ªÅ‡∫•‡ªâ‡∫ß ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÉ‡∫ä‡ªâ‡∫≠‡∫¥‡ªÄ‡∫°‡∫ß ‡ªÅ‡∫•‡∫∞ ‡∫ä‡∫∑‡ªà‡ªÉ‡ªù‡ªà",
      });
    }

    // Create new user
    const user = new User({
      username,
      email,
      password,
      role: role || "user",
      companyId: req.user._id,
    });
    await user.save();

    // Generate token
    const token = jwt.sign(
      { userId: user._id, role: user.role },
      process.env.JWT_SECRET || "secret",
      {
        expiresIn: "7d",
      }
    );

    res.status(201).json({
      token,
      user: {
        id: user._id,
        username: user.username,
        email: user.email,
        role: user.role,
      },
    });
  } catch (error) {
    res.status(500).json({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
      error: error.message,
    });
  }
});
// Account lockout tracking (‡πÉ‡∏ä‡πâ Redis ‡∏´‡∏£‡∏∑‡∏≠ Memory) ‡∫õ‡ªâ‡∫≠‡∫á‡∫Å‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡ªÇ‡∫à‡∫°‡∫ï‡∫µ‡ªÅ‡∫ö‡∫ö  Ddos
const loginAttempts = new Map();
const MAX_LOGIN_ATTEMPTS = 5;
const LOCKOUT_TIME = 1 * 60 * 1000; // 30 ‡∏ô‡∏≤‡∏ó‡∏µ

// Login
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° login
const checkLoginAttempts = (identifier) => {
  const attempts = loginAttempts.get(identifier);
  //‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° login ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)
  //‚Üí ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ login (allowed: true) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (remainingAttempts)
  if (!attempts) {
    return { allowed: true, remainingAttempts: MAX_LOGIN_ATTEMPTS };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  //‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‚Äú‡∏•‡πá‡∏≠‡∏Å‚Äù ‡πÑ‡∏ß‡πâ‡πÑ‡∏´‡∏° (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ login ‡∏ú‡∏¥‡∏î‡∏ö‡πà‡∏≠‡∏¢
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î (lockedUntil > Date.now())
  //‚Üí ‡∏´‡πâ‡∏≤‡∏° login (allowed: false)
  //‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤ ‚Äú‡∏¢‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‚Äù ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ (minutesLeft)
  if (attempts.lockedUntil && attempts.lockedUntil > Date.now()) {
    const minutesLeft = Math.ceil((attempts.lockedUntil - Date.now()) / 60000);
    return {
      allowed: false,
      lockedUntil: attempts.lockedUntil,
      minutesLeft,
    };
  }

  // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πá‡∏≠‡∏Ñ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
  if (attempts.lockedUntil && attempts.lockedUntil <= Date.now()) {
    loginAttempts.delete(identifier);
    return { allowed: true, remainingAttempts: MAX_LOGIN_ATTEMPTS };
  }

  return {
    allowed: attempts.count < MAX_LOGIN_ATTEMPTS,
    remainingAttempts: MAX_LOGIN_ATTEMPTS - attempts.count,
  };
};
//‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
const recordFailedAttempt = (identifier) => {
  const attempts = loginAttempts.get(identifier) || {
    count: 0,
    firstAttempt: Date.now(),
  };
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
  attempts.count++;
  attempts.lastAttempt = Date.now();
  // ‡∏ñ‡πâ‡∏≤‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô MAX_LOGIN_ATTEMPTS ‚Üí ‡∏•‡πá‡∏≠‡∏Ñ
  if (attempts.count >= MAX_LOGIN_ATTEMPTS) {
    attempts.lockedUntil = Date.now() + LOCKOUT_TIME; ///plus ‡ªÄ‡∫ß‡∫•‡∫≤‡∫•‡ªã‡∫≠‡∫Å‡ªÉ‡∫´‡ªâ‡∫•‡ªã‡∫≠‡∫Å‡ªÉ‡ªç‡ªâ‡∫á‡∫≤‡∫ô‡∫Ç‡∫≠‡∫á‡∫ï‡ªç‡ªà‡ªÑ‡∫õ
  }

  loginAttempts.set(identifier, attempts);
  return attempts;
};
//‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏ú‡∏¥‡∏î ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
const clearLoginAttempts = (identifier) => {
  loginAttempts.delete(identifier);
};
// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö suspicious activity
// ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢
// ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ‚Äú‡∏¢‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤ API‚Äù ‡∏Ñ‡∏≠‡∏¢‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ö‡∏≠‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏à‡∏≤‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const detectSuspiciousActivity = (req, res, next) => {
  const userAgent = req.get("user-agent");
  const ip = req.ip;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö User Agent
  // üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user-agent ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ö‡∏≠‡∏ó‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á)
  if (!userAgent || userAgent.length < 10) {
    return res.status(403).json({
      message: "‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡ªÄ‡∫ñ‡∫¥‡∫á‡∫ñ‡∫∑‡∫Å‡∫õ‡∫∞‡∫ï‡∫¥‡ªÄ‡∫™‡∫î",
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Common attack patterns
  const suspiciousPatterns = ["sqlmap", "nikto", "nmap", "masscan"];
  if (
    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    suspiciousPatterns.some((pattern) =>
      userAgent.toLowerCase().includes(pattern)
    )
  ) {
    console.warn(`Suspicious user agent detected: ${userAgent} from IP: ${ip}`);
    return res.status(403).json({
      message:  "‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡ªÄ‡∫ñ‡∫¥‡∫á‡∫ñ‡∫∑‡∫Å‡∫õ‡∫∞‡∫ï‡∫¥‡ªÄ‡∫™‡∫î",
    });
  }

  next();
};

router.post(
  "/login",
  registerLimiter,
  detectSuspiciousActivity,
  async (req, res) => {
    const startTime = Date.now();

    try {
      const { email, password } = req.body;
      const ipAddress = req.ip;
      const userAgent = req.get("user-agent");

      // 1. Input Validation
      if (!email || !password) {
        return res.status(400).json({
          message: "‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫Å‡∫ß‡∫î‡∫™‡∫≠‡∫ö‡∫≠‡∫¥‡ªÄ‡∫°‡∫ß‡ªÅ‡∫•‡∫∞‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô",
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö email
      if (!validator.isEmail(email)) {
        // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô timing attack
        await new Promise((resolve) => setTimeout(resolve, 100));
        return res.status(401).json({
          message: "‡∫≠‡∫¥‡ªÄ‡∫°‡∫ß‡∫´‡∫º‡∫∑‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
        });
      }

      const sanitizedEmail = validator.normalizeEmail(email);
      const identifier = `${sanitizedEmail}:${ipAddress}`;

      // 2. Check Account Lockout
      const attemptCheck = checkLoginAttempts(identifier);
      if (!attemptCheck.allowed) {
        await AuditLog.create({
          action: "LOGIN_BLOCKED_LOCKOUT",
          email: sanitizedEmail,
          ipAddress,
          userAgent,
          details: `Account locked for ${attemptCheck.minutesLeft} minutes`,
          timestamp: new Date(),
        });

        return res.status(429).json({
          message: ` ‡∫ö‡∫±‡∫ô‡∫ä‡∫µ‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô‡∫ñ‡∫∑‡∫Å‡∫ö‡ªã‡∫≠‡∫Å‡∫ä‡∫ª‡ªà‡∫ß‡∫Ñ‡∫≤‡∫ß ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà ${attemptCheck.minutesLeft} ‡∫ô‡∫≤‡∫ó‡∫µ`,
          lockedUntil: attemptCheck.lockedUntil,
        });
      }

      // 3. Find user - ‡πÉ‡∏ä‡πâ lean() ‡πÅ‡∏•‡∏∞ select ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      const user = await User.findOne({ email: sanitizedEmail })
        .select(
          "+password +loginAttempts +lockedUntil +isActive +lastLogin +twoFactorEnabled +twoFactorSecret"
        )
        

      // 4. Timing-safe user check
      const userExists = !!user;

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö user ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ compare password
      if (!userExists) {
        // Fake password comparison ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô timing attack
        await new Promise((resolve) => setTimeout(resolve, 100));
        recordFailedAttempt(identifier);

        await AuditLog.create({
          action: "LOGIN_FAILED_USER_NOT_FOUND",
          email: sanitizedEmail,
          ipAddress,
          userAgent,
          timestamp: new Date(),
        });

        return res.status(401).json({
          message: "‡∫≠‡∫¥‡ªÄ‡∫°‡∫ß‡∫´‡∫º‡∫∑‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
        });
      }

      // 5. Check if account is active
      if (!user.isActive) {
        await AuditLog.create({
          action: "LOGIN_FAILED_INACTIVE_ACCOUNT",
          userId: user._id,
          email: sanitizedEmail,
          ipAddress,
          userAgent,
          timestamp: new Date(),
        });

        return res.status(403).json({
          message: "‡∫ö‡∫±‡∫ô‡∫ä‡∫µ‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô‡∫ñ‡∫∑‡∫Å‡∫•‡∫∞‡∫á‡∫±‡∫ö‡∫Å‡∫≤‡∫ô‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ú‡∫π‡ªâ‡∫î‡∫π‡ªÅ‡∫•‡∫•‡∫∞‡∫ö‡∫ª‡∫ö",
        });
      }

      // 6. Check password with timing-safe comparison
      const isMatch = await user.comparePassword(password);

      if (!isMatch) {
        const attempts = recordFailedAttempt(identifier);

        await AuditLog.create({
          action: "LOGIN_FAILED_WRONG_PASSWORD",
          userId: user._id,
          email: sanitizedEmail,
          ipAddress,
          userAgent,
          attemptNumber: attempts.count,
          timestamp: new Date(),
        });

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó failed attempts ‡πÉ‡∏ô database
        await User.findByIdAndUpdate(user._id, {
          $inc: { loginAttempts: 1 },
          lastFailedLogin: new Date(),
        });

        const remainingAttempts = MAX_LOGIN_ATTEMPTS - attempts.count;
        const message =
          remainingAttempts > 0
            ? `‡∫≠‡∫µ‡ªÄ‡∫°‡∫ß‡∫´‡∫º‡∫∑‡∫•‡∫∞‡∫´‡∫±‡∫±‡∫î‡∫ú‡ªà‡∫≤‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á ‡ªÄ‡∫´‡∫º‡∫∑‡∫≠‡ªÇ‡∫≠‡∫Å‡∫≤‡∫î‡∫≠‡∫µ‡∫Å ${remainingAttempts} ‡∫Ñ‡∫±‡ªâ‡∫á)`
            : "‡∫ö‡∫±‡∫ô‡∫ä‡∫µ‡∫Ç‡∫≠‡∫á‡∫ó‡ªà‡∫≤‡∫ô‡∫ñ‡∫∑‡∫Å‡∫ö‡ªã‡∫≠‡∫Å‡∫ä‡∫ª‡ªà‡∫ß‡∫Ñ‡∫≤‡∫ß";

        return res.status(401).json({ message });
      }

      // 7. Check for suspicious login patterns
      // ‡∏ñ‡πâ‡∏≤ login ‡∏à‡∏≤‡∏Å IP ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠ location ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á notification
      const suspiciousLogin = await checkSuspiciousLogin(
        user._id,
        ipAddress,
        userAgent
      );

      if (suspiciousLogin.isSuspicious) {
        await sendSecurityAlert(user.email, {
          type: "suspicious_login",
          ipAddress,
          location: suspiciousLogin.location,
          device: userAgent,
        });
      }

      // 8. Two-Factor Authentication (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
      if (user.twoFactorEnabled) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á temporary token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 2FA
        const tempToken = crypto.randomBytes(32).toString("hex");

        await User.findByIdAndUpdate(user._id, {
          twoFactorTempToken: tempToken,
          twoFactorTempTokenExpires: Date.now() + 10 * 60 * 1000, // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        });

        return res.status(200).json({
          requiresTwoFactor: true,
          tempToken,
          message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ 2FA",
        });
      }

      // 9. Generate secure JWT token
      const sessionId = crypto.randomBytes(16).toString("hex");

      const token = jwt.sign(
        {
          userId: user._id,
          role: user.role,
          sessionId,
          companyId: user.companyId,
          iat: Math.floor(Date.now() / 1000),
        },
        process.env.JWT_SECRET ||'secret',
        {
          expiresIn: "7d",
          algorithm: "HS256",
          issuer: "admin",
          audience: "admin",
        }
      );

      // 10. Generate refresh token
      const refreshToken = crypto.randomBytes(40).toString("hex");
      const refreshTokenExpiry = new Date(
        Date.now() + 30 * 24 * 60 * 60 * 1000
      ); // 30 ‡∏ß‡∏±‡∏ô

      // 11. Update user login info
      await User.findByIdAndUpdate(user._id, {
        lastLogin: new Date(),
        lastLoginIp: ipAddress,
        lastLoginUserAgent: userAgent,
        loginAttempts: 0,
        refreshToken,
        refreshTokenExpiry,
        $push: {
          loginHistory: {
            timestamp: new Date(),
            ipAddress,
            userAgent,
            sessionId,
          },
        },
      });

      // 12. Clear failed login attempts
      clearLoginAttempts(identifier);

      // 13. Create session record
      await Session.create({
        userId: user._id,
        sessionId,
        token,
        refreshToken,
        ipAddress,
        userAgent,
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        isActive: true,
      });

      // 14. Log successful login
      await AuditLog.create({
        action: "LOGIN_SUCCESS",
        userId: user._id,
        email: sanitizedEmail,
        ipAddress,
        userAgent,
        sessionId,
        suspicious: suspiciousLogin.isSuspicious,
        timestamp: new Date(),
      });

      // 15. Calculate response time (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timing attack)
      const responseTime = Date.now() - startTime;

      // 16. Send response
      res.json({
        token,
        refreshToken,
        expiresIn: 7 * 24 * 60 * 60, // seconds
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          role: user.role,
          lastLogin: user.lastLogin,
        },
        session: {
          sessionId,
          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
        },
      });
    } catch (error) {
      // 17. Secure error handling
      console.error("Login error:", error);

      await ErrorLog.create({
        endpoint: "/login",
        error: error.message,
        stack: error.stack,
        ipAddress: req.ip,
        timestamp: new Date(),
      });

      // ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      res.status(500).json({
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      });
    }
  }
);

// Helper function: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö suspicious login
async function checkSuspiciousLogin(userId, ipAddress, userAgent) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö login history
    const recentLogins = await User.findById(userId)
      .select("loginHistory")
      .lean();

    if (!recentLogins || !recentLogins.loginHistory) {
      return { isSuspicious: false };
    }

    const lastLogin =
      recentLogins.loginHistory[recentLogins.loginHistory.length - 1];

    // ‡∏ñ‡πâ‡∏≤ IP ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    const ipChanged = lastLogin && lastLogin.ipAddress !== ipAddress;

    // ‡∏ñ‡πâ‡∏≤ device/browser ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    const deviceChanged =
      lastLogin && !userAgent.includes(lastLogin.userAgent?.split("/")[0]);

    return {
      isSuspicious: ipChanged || deviceChanged,
      previousIp: lastLogin?.ipAddress,
      currentIp: ipAddress,
      location: await getLocationFromIp(ipAddress),
    };
  } catch (error) {
    console.error("Error checking suspicious login:", error);
    return { isSuspicious: false };
  }
}

// Helper function: ‡∏™‡πà‡∏á security alert
async function sendSecurityAlert(email, details) {
  // ‡πÉ‡∏ä‡πâ email service ‡∏´‡∏£‡∏∑‡∏≠ notification service
  console.log(`Security alert sent to ${email}:`, details);
  // TODO: Implement actual email/notification service
}

// Helper function: Get location from IP
async function getLocationFromIp(ip) {
  // ‡πÉ‡∏ä‡πâ IP geolocation service
  // TODO: Implement IP geolocation
  return "Unknown";
}

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh token
router.post("/refresh-token", async (req, res) => {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö refresh token" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö refresh token
    const session = await Session.findOne({
      refreshToken,
      isActive: true,
      expiresAt: { $gt: new Date() },
    }).populate("userId");

    if (!session) {
      return res
        .status(401)
        .json({ message: "Refresh token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà
    const newToken = jwt.sign(
      {
        userId: session.userId._id,
        role: session.userId.role,
        sessionId: session.sessionId,
      },
      process.env.JWT_SECRET,
      { expiresIn: "7d", algorithm: "HS256" }
    );

    res.json({
      token: newToken,
      expiresIn: 7 * 24 * 60 * 60,
    });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö logout
router.post("/logout", authenticate, async (req, res) => {
  try {
    const sessionId = req.user.sessionId;

    // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ session ‡πÑ‡∏°‡πà active
    await Session.updateOne(
      { sessionId },
      { isActive: false, logoutAt: new Date() }
    );

    await AuditLog.create({
      action: "LOGOUT",
      userId: req.user._id,
      sessionId,
      ipAddress: req.ip,
      timestamp: new Date(),
    });

    res.json({ message: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

// Get current user
router.get("/me", authenticate, async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select("-password");
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

// Get all users (admin only)
router.get("/users", authenticate, async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á" });
    }

    const users = await User.find().select("-password");
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

// Update user role (admin only)
router.patch("/users/:id/role", authenticate, async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á" });
    }

    const { role } = req.body;
    const user = await User.findByIdAndUpdate(
      req.params.id,
      { role },
      { new: true }
    ).select("-password");

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

// Delete user (admin only)
router.delete("/users/:id", authenticate, async (req, res) => {
  try {
    if (req.user.role !== "admin") {
      return res.status(403).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á" });
    }

    await User.findByIdAndDelete(req.params.id);
    res.json({ message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});
// PATCH /api/auth/users/:id
// PATCH /api/auth/users/:id
router.patch("/user/:id", authenticate, async (req, res) => {
  try {
    const { username, email, role, companyInfo } = req.body;
    const updateData = { username, email, role, companyInfo };
    const user = await User.findByIdAndUpdate(req.params.id, updateData, {
      new: true,
    }).select("-password");

    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "Server error" });
  }
});
export default router;
