import express from "express";
import IncomeExpense from "../models/IncomeExpense.js";
import { authenticate, authorize } from "../middleware/auth.js";
import { body, query, validationResult } from "express-validator";
import rateLimit from "express-rate-limit";
import mongoSanitize from "express-mongo-sanitize";
const router = express.Router();
// ‚úÖ Rate Limiting - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô DDoS ‡πÅ‡∏•‡∏∞ Brute Force
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ‡∏ô‡∏≤‡∏ó‡∏µ
  max: 100, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 100 requests ‡∏ï‡πà‡∏≠ IP
  message: "‡∫°‡∫µ‡∫Å‡∫≤‡∫ô‡ªÄ‡∫≠‡∫µ‡∫ô‡ªÉ‡∫ä‡ªâ‡∫´‡∫•‡∫≤‡∫ç‡ªÄ‡∫Å‡∫µ‡∫ô‡ªÑ‡∫õ ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫≠‡∫á‡∫û‡∫≤‡∫ç‡∫´‡∫•‡∫±‡∫á",
  standardHeaders: true,
  legacyHeaders: false,
});
const validateQueryParams = [
  query("type")
    .optional()
    .isIn(["income", "expense"])
    .withMessage("type ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô income ‡∏´‡∏£‡∏∑‡∏≠ expense ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"),
  query("category")
    .optional()
    .trim()
    .isLength({ max: 100 })
    .withMessage("category ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
  query("startDate")
    .optional()
    .isISO8601()
    .withMessage("startDate ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"),
  query("endDate")
    .optional()
    .isISO8601()
    .withMessage("endDate ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"),
  query("search")
    .optional()
    .trim()
    .isLength({ max: 200 })
    .withMessage("search ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
    .matches(/^[a-zA-Z0-9‡∏Å-‡πô\s\-_]+$/)
    .withMessage("search ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï"),
];
// ‚úÖ Sanitize Input - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô NoSQL Injection
const sanitizeInput = (req, res, next) => {
  mongoSanitize.sanitize(req.query); // ‚úÖ sanitize ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà override
  next();
};
// Get all income/expense records
router.get(
  "/",
  authenticate,
  sanitizeInput, // Sanitize inputs
  validateQueryParams, // Validate query parameters
  limiter,
  async (req, res) => {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          message: "‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
          errors: errors.array(),
        });
      }
      const { type, category, startDate, endDate, search } = req.query;
      const query = {};
      if (req.user.role === "admin") {
        query.userId = req.user._id;
      }
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô staff ‡∏´‡∏£‡∏∑‡∏≠ user ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      else {
        query.userId = req.user.companyId;
      }
      if (type) {
        query.type = Array.isArray(type) ? type[0] : type;
      }
      if (category) {
        query.category = Array.isArray(category) ? category[0] : category;
      }
      // ‚úÖ Date Range Validation - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Date Injection
      if (startDate || endDate) {
        query.date = {};
        if (startDate) {
          const start = new Date(startDate);
          if (isNaN(start.getTime())) {
            return res.status(400).json({
              message: "startDate ‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
            });
          }
          query.date.$gte = start;
        }
        if (endDate) {
          const end = new Date(endDate);
          if (isNaN(end.getTime())) {
            return res.status(400).json({
              message: "endDate ‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
            });
          }
          query.date.$lte = end;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ startDate ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ endDate
        if (
          query.date.$gte &&
          query.date.$lte &&
          query.date.$gte > query.date.$lte
        ) {
          return res.status(400).json({
            message: "startDate ‡∫ï‡ªâ‡∫≠‡∫á‡ªú‡ªâ‡∫≠‡∫ç‡∫Å‡ªà‡∫ß‡∫≤‡∫´‡∫º‡∫∑‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫Å‡∫±‡∫ö endDate",
          });
        }
      }
      // ‚úÖ Safe Search - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ReDoS ‡πÅ‡∏•‡∏∞ Injection
      if (search) {
        const sanitizedSearch = search.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        query.$or = [
          { description: { $regex: sanitizedSearch, $options: "i" } },
          { reference: { $regex: sanitizedSearch, $options: "i" } },
        ];
      }
      // ‚úÖ Query with Limit - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Resource Exhaustion
      const limit = Math.min(parseInt(req.query.limit) || 100, 1000);
      const skip = Math.max(parseInt(req.query.skip) || 0, 0);

      const records = await IncomeExpense.find(query)
        .sort({ date: -1 })
        .limit(limit)
        .skip(skip)
        .select("-__v") // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á version key
        .populate("createdBy", "username email role")
        .lean() // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        .exec();
      // ‚úÖ Security Headers
      res.set({
        "X-Content-Type-Options": "nosniff",
        "X-Frame-Options": "DENY",
        "X-XSS-Protection": "1; mode=block",
      });
      res.status(200).json(records);
    } catch (error) {
      // ‚úÖ Error Logging (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ logger ‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô Winston)
      console.error("Error in GET /income-expense:", {
        error: error.message,
        stack: error.stack,
        user: req.user?._id,
        timestamp: new Date().toISOString(),
      });

      // ‚úÖ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢ error details ‡πÉ‡∏´‡πâ client
      res.status(500).json({
        success: false,
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
      });
    }
  }
);

// Bulk creation endpoint
router.post("/bulk", authenticate, async (req, res) => {
  try {
    const { transactions } = req.body;
    // Insert all records at once
    // üîí Input validation
    if (!transactions || typeof transactions !== "object") {
      return res.status(400).json({
        message: "‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á",
      });
    }

    const query = {};
    if (req.user.role === "admin") {
      query.userId = req.user._id;
    }
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô staff ‡∏´‡∏£‡∏∑‡∏≠ user ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    else {
      query.userId = req.user.companyId;
    }
    const exists = await IncomeExpense.findOne({
      serial: transactions.serial,
    }).lean();
    if (exists) {
      return res.status(400).json({
        message: "‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡∫°‡∫µ‡ªÅ‡∫•‡ªâ‡∫ß‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÉ‡ªù‡ªà",
      });
    }
    const savedRecords = await IncomeExpense.insertMany({
      userId: query.userId,
      serial: transactions.serial,
      description: transactions.description,
      type: transactions.type,
      paymentMethod: transactions.paymentMethod,
      date: transactions.date,
      amounts: transactions.amounts,
      note: transactions.note,
      createdBy: req.user._id,
      status: transactions.status,
      status_Ap: transactions.status_Ap,
    });

    res.status(201).json({
      message: `‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å ${savedRecords.length} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î`,
      count: savedRecords.length,
      records: savedRecords,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
      error: error.message,
    });
  }
});

// Update income/expense record
router.put("/:id", authenticate, async (req, res) => {
  try {
    const exiting = await IncomeExpense.findById(req.params.id).lean();
    if (!exiting) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin ‡πÅ‡∏•‡∏∞ status ‡πÄ‡∏õ‡πá‡∏ô approve ‚Üí block
    if (req.user.role !== "admin" && exiting.status_Ap === "approve") {
      return res.status(403).json({
        message: "‡ªÑ‡∫î‡ªâ‡∫Æ‡∫±‡∫ö‡∫Å‡∫≤‡∫ô‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫õ‡ªà‡∫Ω‡∫ô‡ªÅ‡∫õ‡∫á‡ªÑ‡∫î‡ªâ",
      });
    }

    // query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ update
    const query = { _id: req.params.id };
    if (req.user.role === "admin") {
      // admin ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î userId
    } else {
      // staff / user ‚Üí ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      query.userId = req.user.companyId; // ‡∏´‡∏£‡∏∑‡∏≠ req.user._id ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    }

    const record = await IncomeExpense.findOneAndUpdate(query, req.body, {
      new: true,
    });

    if (!record) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }

    res.json(record);
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

// Delete income/expense record
router.delete("/:id", authenticate, async (req, res) => {
  try {
    const query = {};
    if (req.user.role === "admin") {
      query.userId = req.user._id;
    }
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô staff ‡∏´‡∏£‡∏∑‡∏≠ user ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    else {
      query.userId = req.user.companyId;
    }
    const record = await IncomeExpense.findOneAndDelete({
      _id: req.params.id,
      ...query,
    });
    if (!record) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
    res.json({ message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});

// deleteAmount
router.delete("/item/:id/:index", authenticate, async (req, res) => {
  try {
    const { id, index } = req.params;

    // ‡∏´‡∏≤ document ‡∏Å‡πà‡∏≠‡∏ô
    const doc = await IncomeExpense.findById(id);
    if (!doc) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö index ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    if (!doc.amounts || !doc.amounts[index]) {
      return res
        .status(400)
        .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ amounts ‡∏ï‡∏≤‡∏° index ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
    }

    // ‡∏•‡∏ö item ‡∏ï‡∏≤‡∏° index
    doc.amounts.splice(index, 1);
    await doc.save();

    res.json({ message: "‡∫•‡∫ª‡∫ö‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î", data: doc });
  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});
router.patch("/status/:id", authenticate, async (req, res) => {
  try {
    const id = req.params.id.replace(/^:/, "");
    const query = {};
    if (req.user.role === "admin") {
      query.userId = req.user._id;
    }
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô staff ‡∏´‡∏£‡∏∑‡∏≠ user ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    else {
      query.userId = req.user.companyId;
    }
    const record = await IncomeExpense.findOneAndUpdate(
      { _id: id, ...query },
      req.body,
      {
        new: true,
      }
    );
    if (!record) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
    res.json(record);
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: error.message });
  }
});
export default router;
